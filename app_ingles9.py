# -*- coding: utf-8 -*-
"""app_ingles9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BMhRPgocb2UnXTUutPbQJqUEOjbkZ7Gj
"""

import streamlit as st
import random
from data_exercises import all_exercises_data, grammar_tips

st.set_page_config(page_title="App de Aprendizado de Ingl√™s", layout="centered")

st.title("üìö App de Aprendizado de Ingl√™s")

# Sidebar para sele√ß√£o de n√≠veis
st.sidebar.header("Configura√ß√µes do Exerc√≠cio")
level = st.sidebar.selectbox("Selecione o N√≠vel:",
                           options=list(all_exercises_data.keys()),
                           index=0)  # Garante que sempre tenha um valor padr√£o

# Verifica√ß√£o de seguran√ßa dos n√≠veis dispon√≠veis
if level not in all_exercises_data:
    st.error("N√≠vel selecionado n√£o existe nos dados!")
    st.stop()

# Fun√ß√£o corrigida sem experimental_rerun
def display_fill_in_the_blanks_exercise(level):
    try:
        exercises = all_exercises_data[level]["Completar Frases"]
    except KeyError as e:
        st.error(f"Erro na estrutura de dados: {str(e)}")
        st.stop()

    if not exercises:
        st.warning(f"N√£o h√° exerc√≠cios para o n√≠vel '{level}' ainda.")
        return

    # Inicializa√ß√£o segura do session_state
    if 'exercise_data' not in st.session_state or st.session_state.get('current_level') != level:
        st.session_state.exercise_data = {
            'current_level': level,
            'index': 0,
            'shuffled': random.sample(exercises, len(exercises)),
            'user_answer': '',
            'feedback': '',
            'show_answer': False
        }

    current = st.session_state.exercise_data['shuffled'][st.session_state.exercise_data['index']]

    # Exibi√ß√£o do n√≠vel e tipo de gram√°tica
    st.subheader(f"N√≠vel: {level} - Completar Frases")
    st.markdown(f"**Tipo de Gram√°tica:** üéØ *{current['tipo']}*")
    st.write("---")

    # Widget de resposta com chave √∫nica
    user_input = st.text_input(
        "Sua resposta:",
        value=st.session_state.exercise_data['user_answer'],
        key=f"resposta_{st.session_state.exercise_data['index']}"
    )

    col1, col2 = st.columns(2)
    with col1:
        if st.button("‚úÖ Verificar"):
            if user_input.strip().lower() == current["resposta_correta"].lower():
                st.session_state.exercise_data['feedback'] = "‚úÖ Correto!"
            else:
                st.session_state.exercise_data['feedback'] = f"‚ùå Incorreto. Resposta correta: **{current['resposta_correta']}**"
            st.session_state.exercise_data['show_answer'] = True

    with col2:
        if st.button("‚è≠Ô∏è Pr√≥ximo"):
            # Atualiza√ß√£o segura do estado
            st.session_state.exercise_data.update({
                'index': (st.session_state.exercise_data['index'] + 1) % len(st.session_state.exercise_data['shuffled']),
                'user_answer': '',
                'feedback': '',
                'show_answer': False
            })

    # Exibi√ß√£o do feedback
    if st.session_state.exercise_data['show_answer']:
        st.markdown(f"**Feedback:** {st.session_state.exercise_data['feedback']}")

    # Contador de progresso
    st.write("---")
    st.caption(f"Progresso: {st.session_state.exercise_data['index'] + 1}/{len(st.session_state.exercise_data['shuffled'])} exerc√≠cios")

# Execu√ß√£o principal
display_fill_in_the_blanks_exercise(level)