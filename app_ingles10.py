# -*- coding: utf-8 -*-
"""app_ingles10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mAai_7nQ4ktJuIsyMrVBLsO5n3M_WZ5T
"""

import streamlit as st
import random
from data_exercises import all_exercises_data, grammar_tips

st.set_page_config(page_title="App de Aprendizado de Ingl√™s", layout="centered")

st.title("üìö App de Aprendizado de Ingl√™s")

# --- Fun√ß√µes de gerenciamento de estado ---
def _initialize_exercise_state(level, exercises):
    """Inicializa ou reinicializa o estado do exerc√≠cio para um novo n√≠vel ou sess√£o."""
    st.session_state.exercise_data = {
        'current_level': level,
        'index': 0,
        'shuffled': random.sample(exercises, len(exercises)),
        'user_answer': '',
        'feedback': '',
        'show_answer': False,
        'show_tip': False # Novo estado para mostrar a dica
    }

def _next_exercise():
    """Avan√ßa para o pr√≥ximo exerc√≠cio."""
    current_index = st.session_state.exercise_data['index']
    total_exercises = len(st.session_state.exercise_data['shuffled'])

    st.session_state.exercise_data.update({
        'index': (current_index + 1) % total_exercises,
        'user_answer': '',
        'feedback': '',
        'show_answer': False,
        'show_tip': False # Reseta o estado da dica
    })

def _check_answer(user_input_val, correct_answer):
    """Verifica a resposta do usu√°rio e atualiza o feedback."""
    if user_input_val.strip().lower() == correct_answer.lower():
        st.session_state.exercise_data['feedback'] = "‚úÖ Correto!"
    else:
        st.session_state.exercise_data['feedback'] = f"‚ùå Incorreto. Resposta correta: **{correct_answer}**"
    st.session_state.exercise_data['show_answer'] = True
    st.session_state.exercise_data['show_tip'] = False # Esconde a dica se estava vis√≠vel

def _show_grammar_tip(grammar_type):
    """Exibe a dica de gram√°tica."""
    tip = grammar_tips.get(grammar_type, "N√£o h√° uma dica espec√≠fica para este tipo de gram√°tica.")
    st.session_state.exercise_data['feedback'] = f"**Dica sobre {grammar_type}:** {tip}"
    st.session_state.exercise_data['show_answer'] = True # Usamos o feedback para mostrar a dica, marcando como 'show_answer'
    st.session_state.exercise_data['show_tip'] = True # Indica que √© uma dica


# Sidebar para sele√ß√£o de n√≠veis
st.sidebar.header("Configura√ß√µes do Exerc√≠cio")
level = st.sidebar.selectbox("Selecione o N√≠vel:",
                             options=list(all_exercises_data.keys()),
                             index=0)

# Verifica√ß√£o de seguran√ßa dos n√≠veis dispon√≠veis
if level not in all_exercises_data:
    st.error("N√≠vel selecionado n√£o existe nos dados!")
    st.stop()

# Carrega os exerc√≠cios para o n√≠vel selecionado
try:
    exercises = all_exercises_data[level]["Completar Frases"]
except KeyError as e:
    st.error(f"Erro na estrutura de dados: {str(e)}")
    st.stop()

if not exercises:
    st.warning(f"N√£o h√° exerc√≠cios para o n√≠vel '{level}' ainda.")
    st.stop() # Parar aqui se n√£o houver exerc√≠cios

# --- L√≥gica principal do Streamlit ---

# Inicializa o estado se for a primeira vez ou se o n√≠vel mudou
if 'exercise_data' not in st.session_state or st.session_state.exercise_data['current_level'] != level:
    _initialize_exercise_state(level, exercises)

current_exercise = st.session_state.exercise_data['shuffled'][st.session_state.exercise_data['index']]

# Exibi√ß√£o do n√≠vel e tipo de gram√°tica
st.subheader(f"N√≠vel: {level} - Completar Frases")
st.markdown(f"**Tipo de Gram√°tica:** üéØ *{current_exercise['tipo']}*")
st.write("---")

# Exibi√ß√£o da frase do exerc√≠cio
st.markdown(f"### Complete a frase:")
st.markdown(f"## **`{current_exercise['frase']}`**")

# Widget de resposta com chave √∫nica
# Importante: o valor padr√£o do text_input deve vir do session_state
user_input = st.text_input(
    "Sua resposta:",
    value=st.session_state.exercise_data['user_answer'],
    key=f"resposta_{st.session_state.exercise_data['index']}" # Chave √∫nica para cada exerc√≠cio
)

# --- Bot√µes de a√ß√£o ---
col1, col2, col3 = st.columns(3)

with col1:
    # O bot√£o 'Verificar' chama uma fun√ß√£o que atualiza o feedback
    st.button("‚úÖ Verificar", on_click=_check_answer, args=(user_input, current_exercise['resposta_correta']))

with col2:
    # O bot√£o 'Pr√≥ximo' chama uma fun√ß√£o que avan√ßa o exerc√≠cio
    st.button("‚è≠Ô∏è Pr√≥ximo", on_click=_next_exercise)

with col3:
    # O bot√£o 'Dica de Gram√°tica' chama uma fun√ß√£o que exibe a dica
    st.button("üí° Dica de Gram√°tica", on_click=_show_grammar_tip, args=(current_exercise['tipo'],))

# --- Exibi√ß√£o de Feedback/Dica ---
# O feedback √© exibido apenas se show_answer for True
if st.session_state.exercise_data['show_answer']:
    if st.session_state.exercise_data['show_tip']:
        # Se for uma dica, formatamos como info
        st.info(st.session_state.exercise_data['feedback'])
    else:
        # Caso contr√°rio, √© um feedback de verifica√ß√£o
        st.markdown(f"**Feedback:** {st.session_state.exercise_data['feedback']}")

# Contador de progresso
st.write("---")
st.caption(f"Progresso: {st.session_state.exercise_data['index'] + 1}/{len(st.session_state.exercise_data['shuffled'])} exerc√≠cios")