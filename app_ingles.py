# -*- coding: utf-8 -*-
"""app_ingles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DPp1p7d73-Jfgi9hfBmFsxT8gvU1x53d
"""

import streamlit as st
import random
from gtts import gTTS
import os
import time
import pandas as pd
import plotly.express as px

# --- Configurações Iniciais do Aplicativo ---
TOTAL_PERGUNTAS_POR_SESSAO = 10 # Número de perguntas por sessão de aprendizado

st.set_page_config(
    page_title="App de Inglês Divertido!",
    layout="wide",
    initial_sidebar_state="collapsed",
    page_icon="📚",
)

# --- Dados das Perguntas (Exemplo inicial) ---
# Formato: {"level": "nível", "sentence": "frase com lacuna ____", "answer": "resposta correta", "full_sentence": "frase completa (para TTS/feedback)"}
QUESTIONS_DATA = [
    # Nível Básico
    {"level": "Básico", "sentence": "The cat is ____ the mat.", "answer": "on", "full_sentence": "The cat is on the mat."},
    {"level": "Básico", "sentence": "I ____ happy.", "answer": "am", "full_sentence": "I am happy."},
    {"level": "Básico", "sentence": "She ____ a student.", "answer": "is", "full_sentence": "She is a student."},
    {"level": "Básico", "sentence": "They ____ friends.", "answer": "are", "full_sentence": "They are friends."},
    {"level": "Básico", "sentence": "What is ____ name?", "answer": "your", "full_sentence": "What is your name?"},
    {"level": "Básico", "sentence": "I like ____ apples.", "answer": "red", "full_sentence": "I like red apples."},
    {"level": "Básico", "sentence": "He has a ____ dog.", "answer": "big", "full_sentence": "He has a big dog."},
    {"level": "Básico", "sentence": "The book is ____ the table.", "answer": "on", "full_sentence": "The book is on the table."},
    {"level": "Básico", "sentence": "We ____ go to school.", "answer": "go", "full_sentence": "We go to school."},
    {"level": "Básico", "sentence": "She ____ coffee every morning.", "answer": "drinks", "full_sentence": "She drinks coffee every morning."},
    {"level": "Básico", "sentence": "The bird is ____ the tree.", "answer": "in", "full_sentence": "The bird is in the tree."},
    {"level": "Básico", "sentence": "I have ____ sister.", "answer": "one", "full_sentence": "I have one sister."},

    # Nível Intermediário
    {"level": "Intermediário", "sentence": "I ____ to visit Paris next year.", "answer": "plan", "full_sentence": "I plan to visit Paris next year."},
    {"level": "Intermediário", "sentence": "He has been ____ English for five years.", "answer": "studying", "full_sentence": "He has been studying English for five years."},
    {"level": "Intermediário", "sentence": "Could you please ____ me the salt?", "answer": "pass", "full_sentence": "Could you please pass me the salt?"},
    {"level": "Intermediário", "sentence": "The movie was ____ interesting.", "answer": "quite", "full_sentence": "The movie was quite interesting."},
    {"level": "Intermediário", "sentence": "She was ____ by the beautiful scenery.", "answer": "fascinated", "full_sentence": "She was fascinated by the beautiful scenery."},
    {"level": "Intermediário", "sentence": "They decided to ____ a new business.", "answer": "start", "full_sentence": "They decided to start a new business."},
    {"level": "Intermediário", "sentence": "We need to ____ the problem.", "answer": "address", "full_sentence": "We need to address the problem."},
    {"level": "Intermediário", "sentence": "It's important to ____ your goals.", "answer": "achieve", "full_sentence": "It's important to achieve your goals."},
    {"level": "Intermediário", "sentence": "He is ____ of speaking French fluently.", "answer": "capable", "full_sentence": "He is capable of speaking French fluently."},
    {"level": "Intermediário", "sentence": "I'm looking ____ to your visit.", "answer": "forward", "full_sentence": "I'm looking forward to your visit."},
    {"level": "Intermediário", "sentence": "She ____ to improve her skills.", "answer": "strives", "full_sentence": "She strives to improve her skills."},
    {"level": "Intermediário", "sentence": "The project was ____ with many challenges.", "answer": "faced", "full_sentence": "The project was faced with many challenges."},

    # Nível Avançado
    {"level": "Avançado", "sentence": "The company's success is largely ____ to its innovative approach.", "answer": "attributable", "full_sentence": "The company's success is largely attributable to its innovative approach."},
    {"level": "Avançado", "sentence": "His argument was so ____ that it convinced everyone.", "answer": "cogent", "full_sentence": "His argument was so cogent that it convinced everyone."},
    {"level": "Avançado", "sentence": "The politician's speech was full of ____.", "answer": "rhetoric", "full_sentence": "The politician's speech was full of rhetoric."},
    {"level": "Avançado", "sentence": "She tried to ____ her discomfort with a fake smile.", "answer": "disguise", "full_sentence": "She tried to disguise her discomfort with a fake smile."},
    {"level": "Avançado", "sentence": "The old factory was ____ into luxury apartments.", "answer": "converted", "full_sentence": "The old factory was converted into luxury apartments."},
    {"level": "Avançado", "sentence": "The new policy will have a ____ impact on the economy.", "answer": "profound", "full_sentence": "The new policy will have a profound impact on the economy."},
    {"level": "Avançado", "sentence": "His knowledge of history is truly ____.", "answer": "encyclopedic", "full_sentence": "His knowledge of history is truly encyclopedic."},
    {"level": "Avançado", "sentence": "The government faces a ____ task in rebuilding the nation.", "answer": "formidable", "full_sentence": "The government faces a formidable task in rebuilding the nation."},
    {"level": "Avançado", "sentence": "They had to ____ a new strategy to overcome the challenges.", "answer": "devise", "full_sentence": "They had to devise a new strategy to overcome the challenges."},
    {"level": "Avançado", "sentence": "The decision was made after much ____.", "answer": "deliberation", "full_sentence": "The decision was made after much deliberation."},
    {"level": "Avançado", "sentence": "Her dedication to the cause is ____.", "answer": "unwavering", "full_sentence": "Her dedication to the cause is unwavering."},
    {"level": "Avançado", "sentence": "The intricate details of the plan are ____.", "answer": "baffling", "full_sentence": "The intricate details of the plan are baffling."},
]


# --- Funções Auxiliares ---
def falar(texto, lang='en'):
    """
    Função para converter texto em voz.
    """
    try:
        tts = gTTS(text=texto, lang=lang, slow=False)
        audio_file = "temp_audio.mp3"
        tts.save(audio_file)
        st.audio(audio_file, format="audio/mp3", start_time=0, loop=False)
        time.sleep(max(1.5, len(texto) * 0.08)) # Ajuste o tempo de espera se necessário
        if os.path.exists(audio_file):
            os.remove(audio_file)
    except Exception as e:
        print(f"Erro detalhado ao gerar/reproduzir áudio: {e}")
        st.warning(
            "Não foi possível reproduzir o áudio. Verifique sua conexão com a internet ou as permissões do navegador."
        )


def inicializar_estado():
    """Inicializa as variáveis de estado da sessão do Streamlit."""
    if "iniciado" not in st.session_state:
        st.session_state.iniciado = False
    if "level_selected" not in st.session_state:
        st.session_state.level_selected = "Básico" # Nível padrão
    if "current_questions" not in st.session_state:
        st.session_state.current_questions = []
    if "current_question_index" not in st.session_state:
        st.session_state.current_question_index = 0
    if "correct_count" not in st.session_state:
        st.session_state.correct_count = 0
    if "incorrect_count" not in st.session_state:
        st.session_state.incorrect_count = 0
    if "show_feedback" not in st.session_state:
        st.session_state.show_feedback = False
    if "last_feedback_correct" not in st.session_state:
        st.session_state.last_feedback_correct = None
    if "last_correct_answer" not in st.session_state:
        st.session_state.last_correct_answer = ""
    if "mostrar_resultados_finais" not in st.session_state:
        st.session_state.mostrar_resultados_finais = False
    if "last_key" not in st.session_state: # Para resetar o input text
        st.session_state.last_key = time.time()


def iniciar_quiz():
    """Filtra as perguntas pelo nível e inicia o quiz."""
    st.session_state.current_questions = [
        q for q in QUESTIONS_DATA if q["level"] == st.session_state.level_selected
    ]
    random.shuffle(st.session_state.current_questions) # Embaralha as perguntas
    st.session_state.current_questions = st.session_state.current_questions[:TOTAL_PERGUNTAS_POR_SESSAO] # Limita ao total por sessão

    st.session_state.iniciado = True
    st.session_state.current_question_index = 0
    st.session_state.correct_count = 0
    st.session_state.incorrect_count = 0
    st.session_state.show_feedback = False
    st.session_state.mostrar_resultados_finais = False
    st.session_state.last_key = time.time() # Reseta a key do input
    st.rerun()


def processar_resposta(user_answer):
    """Processa a resposta do usuário, atualiza contagens e avança a pergunta."""
    if st.session_state.current_question_index < len(st.session_state.current_questions):
        current_q = st.session_state.current_questions[st.session_state.current_question_index]
        correct_answer = current_q["answer"].strip().lower()
        user_answer_processed = user_answer.strip().lower()

        st.session_state.show_feedback = True
        st.session_state.last_correct_answer = current_q["answer"]

        if user_answer_processed == correct_answer:
            st.session_state.correct_count += 1
            st.session_state.last_feedback_correct = True
        else:
            st.session_state.incorrect_count += 1
            st.session_state.last_feedback_correct = False
    else:
        # Isso não deve acontecer se a lógica de controle de fluxo estiver correta
        pass

    # Prepara para a próxima pergunta ou para os resultados finais
    st.session_state.current_question_index += 1
    st.session_state.last_key = time.time() # Troca a key para forçar reset do text_input
    st.rerun()


# --- Funções de Mensagens Motivacionais ---
def exibir_mensagem_motivacional(percentual):
    st.write("")  # Espaçamento
    if percentual == 100:
        st.balloons()
        st.markdown(
            "<h3 style='text-align: center; color: #28A745;'>🎉 Fantastic! 100% correct! You are an English master! Congratulations! 🎉</h3>",
            unsafe_allow_html=True,
        )
    elif percentual >= 80:
        st.success("🌟 Amazing! You're doing great in English! Keep it up!")
    elif percentual >= 50:
        st.info("👍 Very good! You've got many right. A little more practice and you'll get there!")
    else:
        st.warning(
            "💪 Don't give up! Every mistake is a chance to learn. Keep practicing, you'll get it!"
        )
    st.write("")


# --- Estilo CSS Personalizado ---
# URL RAW da imagem de fundo (usando a mesma que você já tem, pode mudar depois)
BACKGROUND_IMAGE_RAW_URL = "https://raw.githubusercontent.com/marciaestudar/projeto_simulador/main/imagem_numeros5.jpeg" # Você pode querer uma nova imagem de fundo!

page_bg_img_css = f"""
        <style>
        /* Estilo para o container principal do Streamlit */
        [data-testid="stAppViewContainer"] {{
            background-image: url("{BACKGROUND_IMAGE_RAW_URL}") !important;
            background-size: cover !important;
            background-position: center !important;
            background-repeat: no-repeat !important;
            background-attachment: fixed !important;
        }}

        /* Garantir que o container principal do conteúdo seja transparente */
        [data-testid="stAppViewContainer"] > .main {{
            background-color: rgba(255, 255, 255, 0) !important; /* Totalmente transparente */
        }}

        /* Garantir que o bloco de conteúdo principal também seja transparente */
        [data-testid="stVerticalBlock"] {{
            background-color: rgba(255, 255, 255, 0) !important; /* Totalmente transparente */
        }}

        /* Estilos para o texto: cor, negrito, sem sombra */
        h3, p, span, div, .stTextInput > div > div > input {{
            color: #080404 !important; /* Preto */
            font-weight: bold !important;
        }}

        /* Ajustar cor do texto para títulos principais sem sombra, mantendo negrito */
        h1 {{
            color: #F20A1D !important; /* Vermelho Rosa/Fúcsia para h1 */
            font-weight: bold !important;
        }}
        /* Ajustar cor do texto do h2 (especificamente o "Vamos aprender e brincar muito!") para azul negrito */
        h2 {{
            color: #bf0f18 !important; /* vermelho céu profundo para h2 */
            font-weight: bold !important;
        }}

        /* Ajuste de cor do input de texto para contraste */
        .stTextInput > div > div > input {{
            background-color: rgba(255, 255, 255, 0.85) !important; /* Fundo semi-transparente para o input */
            color: #9E0303 !important; /* Cor do texto no input (vermelho escuro) */
            border-radius: 5px !important;
            padding: 8px 12px !important;
        }}

        /* Ajustar cor de fundo do st-emotion-cache para inputs e botões */
        div[data-testid="stTextInput"], div[data-testid="stButton"] {{
            background-color: white !important; /* Fundo branco para os elementos */
            border-radius: 8px !important;
        }}

        /* --- ESTILO PARA TODOS OS BOTÕES: FUNDO BRANCO (PADRÃO) E TEXTO PRETO NEGRITO --- */
        div > button {{
            color: black !important; /* Texto preto */
            font-weight: bold !important; /* Texto em negrito */
            border-radius: 8px; /* Bordas mais arredondadas */
            padding: 10px 20px; /* Mais espaçamento interno */
            font-size: 18px; /* Tamanho do texto do botão */
            border: 1px solid #333; /* Borda sutil para definir o botão */
            box-shadow: 2px 2px 5px rgba(0,0,0,0.3); /* Sombra para dar profundidade */
            transition: all 0.2s ease-in-out; /* Transição suave para hover */
            background-color: white !important; /* Forçando o fundo branco padrão */
        }}

        /* Estilo para quando o mouse passa por cima de qualquer botão */
        div > button:hover {{
            background-color: #dc3545 !important; /* Vermelho no hover */
            color: white !important; /* Texto branco no hover para melhor contraste */
            transform: translateY(-2px); /* Pequeno movimento para cima */
            box-shadow: 4px 4px 10px rgba(0,0,0,0.4); /* Sombra maior no hover */
        }}

        /* Estilo para quando o botão está ativo (clicado) - opcional */
        div > button:active {{
            background-color: #c82333 !important; /* Vermelho mais escuro ao clicar */
            transform: translateY(0); /* Remove o movimento ao clicar */
            box-shadow: 2px 2px 5px rgba(0,0,0,0.3); /* Restaura a sombra ao clicar */
        }}

        </style>
        """
st.markdown(page_bg_img_css, unsafe_allow_html=True)


# --- Layout do Streamlit ---

# Título principal
st.markdown("<h1 style='text-align: center;'>📚 App de Inglês Divertido! 📚</h1>", unsafe_allow_html=True)
st.markdown("<h2 style='text-align: center;'>Let's learn and have fun!</h2>", unsafe_allow_html=True)

inicializar_estado()

if not st.session_state.iniciado:
    st.markdown("<p style='font-size: 25px; color: #3366FF;'><b>Selecione o nível de dificuldade:</b></p>", unsafe_allow_html=True)

    st.session_state.level_selected = st.selectbox(
        "Nível:",
        options=["Básico", "Intermediário", "Avançado"],
        index=["Básico", "Intermediário", "Avançado"].index(st.session_state.level_selected),
        key="level_select"
    )
    st.write("")

    st.markdown(f"<p style='font-size: 25px; color: #FF4500;'><b>Você responderá {TOTAL_PERGUNTAS_POR_SESSAO} perguntas no nível {st.session_state.level_selected}.</b></p>", unsafe_allow_html=True)
    st.markdown("<p style='font-size: 25px; color: #8A2BE2;'><b>Ao final, verá seu desempenho.</b></p>", unsafe_allow_html=True)
    st.write("")

    if st.button("🚀 Iniciar Quiz!", key="btn_iniciar_tela_inicial", help="Começar o desafio de inglês"):
        iniciar_quiz()

    if st.session_state.mostrar_resultados_finais:
        st.divider()
        st.markdown("<h2 style='text-align: center; color: #FFD700;'>🎉 Seus Resultados! 🎉</h2>", unsafe_allow_html=True)

        percentual = (st.session_state.correct_count / TOTAL_PERGUNTAS_POR_SESSAO) * 100 if TOTAL_PERGUNTAS_POR_SESSAO > 0 else 0
        exibir_mensagem_motivacional(percentual)

        st.markdown(f"<p style='font-size: 20px; color: #28A745;'>Acertos: <b>{st.session_state.correct_count}</b></p>", unsafe_allow_html=True)
        st.markdown(f"<p style='font-size: 20px; color: #DC3545;'>Erros: <b>{st.session_state.incorrect_count}</b></p>", unsafe_allow_html=True)
        st.markdown(f"<p style='font-size: 20px; color: #6F42C1;'>Percentual de Acertos: <b>{percentual:.2f}%</b></p>", unsafe_allow_html=True)

        data = {'Categoria': ['Acertos', 'Erros'],
                'Quantidade': [st.session_state.correct_count, st.session_state.incorrect_count]}
        df = pd.DataFrame(data)

        fig = px.pie(df, values='Quantidade', names='Categoria',
                    title='Desempenho Geral',
                    color_discrete_sequence=['#4CAF50', '#F44336'])
        fig.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig, use_container_width=True)

        col_res1, col_res2 = st.columns(2)
        with col_res1:
            if st.button("🔄 Reiniciar Quiz", key="btn_reiniciar_apos_finalizar", help="Começar um novo desafio"):
                inicializar_estado() # Reseta completamente o estado
                st.session_state.iniciado = False # Volta para a tela de seleção de nível
                st.rerun()
        with col_res2:
            if st.button("🔴 Finalizar o Aplicativo", key="btn_finalizar", help="Finalizar o aplicativo"):
                st.write("Aplicativo finalizado. Você pode fechar esta aba.")
                st.stop()

    st.divider()
    st.markdown("<p style='text-align: center; font-size: 25px; color: #800080;'><b>Autora: Márcia Romanato</b></p>", unsafe_allow_html=True)

else:
    # --- Lógica para perguntas uma a uma ---
    if st.session_state.current_question_index < TOTAL_PERGUNTAS_POR_SESSAO:
        current_q = st.session_state.current_questions[st.session_state.current_question_index]

        st.markdown(f"<h3 style='color: #008080;'>Pergunta {st.session_state.current_question_index + 1} de {TOTAL_PERGUNTAS_POR_SESSAO}:</h3>", unsafe_allow_html=True)
        st.markdown("<p style='font-size: 25px; color: #B22222;'><b>Tip:</b> Type only the missing word/phrase. (e.g., 'on', 'am').</p>", unsafe_allow_html=True)

        st.divider()

        # Usamos um formulário para que o input possa ser resetado após o submit
        with st.form(key=f"question_form_{st.session_state.current_question_index}"):
            st.markdown(f"<p style='font-size: 30px; font-weight: bold; color: #5F9EA0;'>{current_q['sentence']}</p>", unsafe_allow_html=True)

            # Botão de voz para a frase
            if st.button("🔊 Ouvir Frase", key=f"speak_button_{st.session_state.current_question_index}"):
                falar(current_q['full_sentence'], lang='en')

            resposta_usuario = st.text_input(
                "Sua resposta:",
                key=f"resposta_input_{st.session_state.current_question_index}_{st.session_state.last_key}",
                max_chars=50 # Aumentei o limite de caracteres para palavras/frases
            )

            submit_button_text = "Próxima Pergunta"
            if st.session_state.current_question_index == TOTAL_PERGUNTAS_POR_SESSAO - 1:
                submit_button_text = "Verificar Resultados Finais"

            submitted = st.form_submit_button(submit_button_text)

            if submitted:
                # Processa a resposta e avança
                processar_resposta(resposta_usuario)

        # Feedback imediato (aparece após o submit do formulário)
        if st.session_state.show_feedback:
            st.write("") # Espaçamento
            if st.session_state.last_feedback_correct:
                st.success("✅ Correct! Excellent!")
                # Opcional: falar a resposta correta se quiser, mesmo quando acerta
                # falar(st.session_state.last_correct_answer, lang='en')
            else:
                st.error(f"❌ Incorrect. The correct answer was: '{st.session_state.last_correct_answer}'")
                falar(f"The correct answer was: {st.session_state.last_correct_answer}", lang='en')
            st.session_state.show_feedback = False # Reseta para não mostrar no próximo rerun

    else:
        # Fim das perguntas, transiciona para a tela de resultados
        st.session_state.mostrar_resultados_finais = True
        st.session_state.iniciado = False
        st.rerun()

    st.divider()
    st.markdown("<p style='text-align: center; font-size: 25px; color: #800080;'><b>Autora: Márcia Romanato</b></p>", unsafe_allow_html=True)