# -*- coding: utf-8 -*-
"""app_ingles11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17oVpdRHFcDnZXMMwBTV9iiAjbyXmSj-9
"""

import streamlit as st
import random
import matplotlib.pyplot as plt
import pandas as pd # Para o gr√°fico de pizza
from data_exercises import all_exercises_data, grammar_tips

st.set_page_config(page_title="App de Aprendizado de Ingl√™s", layout="centered")

st.title("üìö App de Aprendizado de Ingl√™s")

# --- Constantes ---
NUM_EXERCISES_PER_LEVEL = 15

# --- Fun√ß√µes de gerenciamento de estado ---
def _initialize_exercise_state(level, exercises):
    """Inicializa ou reinicializa o estado do exerc√≠cio para um novo n√≠vel ou sess√£o."""
    # Garante que n√£o pegamos mais exerc√≠cios do que o dispon√≠vel
    num_to_sample = min(NUM_EXERCISES_PER_LEVEL, len(exercises))

    st.session_state.exercise_data = {
        'current_level': level,
        'index': 0,
        'shuffled': random.sample(exercises, num_to_sample), # Limita a NUM_EXERCISES_PER_LEVEL
        'user_answer': '',
        'feedback': '',
        'show_answer': False,
        'show_tip': False,
        'correct_count': 0, # Novo: contador de acertos
        'incorrect_count': 0, # Novo: contador de erros
        'current_Youtubeed': False # Novo: para controlar se a pergunta atual j√° foi respondida
    }

def _next_exercise():
    """Avan√ßa para o pr√≥ximo exerc√≠cio."""
    current_index = st.session_state.exercise_data['index']
    total_exercises = len(st.session_state.exercise_data['shuffled'])

    # Se j√° respondemos todas as perguntas do lote, n√£o avan√ßa mais e talvez exiba a mensagem final
    if current_index + 1 >= total_exercises:
        st.session_state.exercise_data['index'] = total_exercises # Marca como "finalizado"
        st.session_state.exercise_data['user_answer'] = ''
        st.session_state.exercise_data['feedback'] = ''
        st.session_state.exercise_data['show_answer'] = False
        st.session_state.exercise_data['show_tip'] = False
        st.session_state.exercise_data['current_Youtubeed'] = False
        st.session_state['quiz_finished'] = True # Sinaliza que o quiz terminou
        return # N√£o avan√ßa o √≠ndice se j√° for a √∫ltima pergunta

    st.session_state.exercise_data.update({
        'index': (current_index + 1), # N√£o usamos modulo aqui, para parar no fim do lote
        'user_answer': '',
        'feedback': '',
        'show_answer': False,
        'show_tip': False,
        'current_Youtubeed': False
    })

def _check_answer(user_input_val, correct_answer):
    """Verifica a resposta do usu√°rio e atualiza o feedback."""
    if st.session_state.exercise_data['current_Youtubeed']:
        # Se j√° foi respondida, n√£o faz nada para evitar recontar
        return

    if user_input_val.strip().lower() == correct_answer.lower():
        st.session_state.exercise_data['feedback'] = "‚úÖ Correto!"
        st.session_state.exercise_data['correct_count'] += 1 # Incrementa acertos
    else:
        st.session_state.exercise_data['feedback'] = f"‚ùå Incorreto. Resposta correta: **{correct_answer}**"
        st.session_state.exercise_data['incorrect_count'] += 1 # Incrementa erros

    st.session_state.exercise_data['show_answer'] = True
    st.session_state.exercise_data['show_tip'] = False
    st.session_state.exercise_data['current_Youtubeed'] = True # Marca como respondida

def _show_grammar_tip(grammar_type):
    """Exibe a dica de gram√°tica."""
    tip = grammar_tips.get(grammar_type, "N√£o h√° uma dica espec√≠fica para este tipo de gram√°tica.")
    st.session_state.exercise_data['feedback'] = f"**Dica sobre {grammar_type}:** {tip}"
    st.session_state.exercise_data['show_answer'] = True
    st.session_state.exercise_data['show_tip'] = True

# --- Mensagens Motivacionais ---
motivational_messages = {
    "high": [
        "Fantastic job! Your dedication is truly paying off. Keep up the excellent work! ‚ú®",
        "Outstanding! You're making great progress and mastering these concepts. Celebrate your success! üèÜ",
        "Brilliant! Your hard work shines through. The sky's the limit for your English skills! üöÄ",
        "Exceptional performance! You're clearly committed to fluency. Keep pushing forward! üí™"
    ],
    "low": [
        "Every mistake is a lesson in disguise. Keep practicing, and you'll see amazing improvement! üåü",
        "Don't give up! Learning a language is a journey, not a race. Your effort will lead to success. üå±",
        "You're making progress, even if it feels slow. Consistency is key! Keep learning and growing. üìà",
        "Stay positive! Challenges are opportunities to grow. Keep reviewing and challenging yourself. You've got this! resilience üí™"
    ]
}

def get_motivational_message(score_percentage):
    """Retorna uma mensagem motivacional com base na porcentagem de acerto."""
    if score_percentage >= 70:
        return random.choice(motivational_messages["high"])
    else:
        return random.choice(motivational_messages["low"])

# --- Sidebar ---
st.sidebar.header("Configura√ß√µes do Exerc√≠cio")
level = st.sidebar.selectbox("Selecione o N√≠vel:",
                             options=list(all_exercises_data.keys()),
                             index=0)

# Verifica√ß√£o de seguran√ßa dos n√≠veis dispon√≠veis
if level not in all_exercises_data:
    st.error("N√≠vel selecionado n√£o existe nos dados!")
    st.stop()

# Carrega os exerc√≠cios para o n√≠vel selecionado
try:
    all_level_exercises = all_exercises_data[level]["Completar Frases"]
except KeyError as e:
    st.error(f"Erro na estrutura de dados: {str(e)}")
    st.stop()

if not all_level_exercises:
    st.warning(f"N√£o h√° exerc√≠cios para o n√≠vel '{level}' ainda.")
    st.stop()

# Inicializa o estado se for a primeira vez ou se o n√≠vel mudou
if 'exercise_data' not in st.session_state or st.session_state.exercise_data['current_level'] != level:
    _initialize_exercise_state(level, all_level_exercises)
    st.session_state['quiz_finished'] = False # Resetar o estado do quiz ao mudar de n√≠vel

# --- Gr√°fico de Pizza de Acertos/Erros (na sidebar) ---
st.sidebar.subheader("Resultados Atuais")
total_answered = st.session_state.exercise_data['correct_count'] + st.session_state.exercise_data['incorrect_count']

if total_answered > 0:
    labels = ['Acertos', 'Erros']
    sizes = [st.session_state.exercise_data['correct_count'], st.session_state.exercise_data['incorrect_count']]
    colors = ['#4CAF50', '#F44336'] # Verde para acertos, Vermelho para erros
    explode = (0.1, 0) # explode 1st slice

    fig1, ax1 = plt.subplots()
    ax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',
            colors=colors, shadow=True, startangle=90)
    ax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
    st.sidebar.pyplot(fig1)

    # Exibe o n√∫mero de acertos e erros
    st.sidebar.write(f"**Acertos:** {st.session_state.exercise_data['correct_count']}")
    st.sidebar.write(f"**Erros:** {st.session_state.exercise_data['incorrect_count']}")
else:
    st.sidebar.info("Comece a responder para ver seus resultados!")

st.sidebar.write("---") # Linha divis√≥ria

# --- L√≥gica de exibi√ß√£o principal dos exerc√≠cios ---

current_exercise_index = st.session_state.exercise_data['index']
shuffled_exercises = st.session_state.exercise_data['shuffled']
total_exercises_in_batch = len(shuffled_exercises)

if st.session_state.get('quiz_finished') and current_exercise_index >= total_exercises_in_batch:
    # Quiz finalizado, exibe resultados e mensagem motivacional
    st.success("üéâ Parab√©ns! Voc√™ completou todos os exerc√≠cios deste n√≠vel!")
    final_correct = st.session_state.exercise_data['correct_count']
    final_total = total_exercises_in_batch

    if final_total > 0:
        score_percentage = (final_correct / final_total) * 100
        st.metric(label="Sua Pontua√ß√£o Final", value=f"{score_percentage:.1f}%")
        st.write("---")
        st.subheader("Keep Going!")
        st.info(get_motivational_message(score_percentage))
    else:
        st.info("Nenhum exerc√≠cio foi respondido neste n√≠vel.")

    # Bot√£o para recome√ßar o quiz do n√≠vel atual
    if st.button("üîÑ Recome√ßar este N√≠vel"):
        _initialize_exercise_state(level, all_level_exercises)
        st.session_state['quiz_finished'] = False
        st.rerun() # Reinicia o script para mostrar o primeiro exerc√≠cio

    # Adicionar um separador para evitar que o "Recome√ßar" se misture com o pr√≥ximo n√≠vel se o usu√°rio mudar
    st.write("---")
    st.info("Para continuar, selecione outro n√≠vel na barra lateral ou recomece este.")

else:
    # Continua exibindo os exerc√≠cios
    current_exercise = shuffled_exercises[current_exercise_index]

    st.subheader(f"N√≠vel: {level} - Completar Frases")
    st.markdown(f"**Tipo de Gram√°tica:** üéØ *{current_exercise['tipo']}*")
    st.write("---")

    st.markdown(f"### Complete a frase:")
    st.markdown(f"## **`{current_exercise['frase']}`**")

    # Widget de resposta com chave √∫nica
    # O valor padr√£o √© da session_state, mas √© atualizado apenas quando o usu√°rio digita
    user_input = st.text_input(
        "Sua resposta:",
        value=st.session_state.exercise_data['user_answer'],
        key=f"resposta_{st.session_state.exercise_data['index']}" # Chave √∫nica para cada exerc√≠cio
    )
    # Atualiza a resposta do usu√°rio no session_state para persist√™ncia
    st.session_state.exercise_data['user_answer'] = user_input

    col1, col2, col3 = st.columns(3)

    with col1:
        st.button(
            "‚úÖ Verificar",
            on_click=_check_answer,
            args=(user_input, current_exercise['resposta_correta']),
            disabled=st.session_state.exercise_data['current_Youtubeed'] # Desabilita ap√≥s responder
        )

    with col2:
        # Apenas avan√ßa se a pergunta atual j√° foi respondida para garantir que o _check_answer foi chamado
        st.button(
            "‚è≠Ô∏è Pr√≥ximo",
            on_click=_next_exercise,
            disabled=not st.session_state.exercise_data['current_Youtubeed'] # Desabilita se n√£o respondeu
        )

    with col3:
        st.button(
            "üí° Dica de Gram√°tica",
            on_click=_show_grammar_tip,
            args=(current_exercise['tipo'],),
            disabled=st.session_state.exercise_data['show_tip'] # Desabilita se a dica j√° est√° vis√≠vel
        )

    # --- Exibi√ß√£o de Feedback/Dica ---
    if st.session_state.exercise_data['show_answer']:
        if st.session_state.exercise_data['show_tip']:
            st.info(st.session_state.exercise_data['feedback'])
        else:
            st.markdown(f"**Feedback:** {st.session_state.exercise_data['feedback']}")

    # Contador de progresso
    st.write("---")
    st.caption(f"Progresso: {current_exercise_index + 1}/{total_exercises_in_batch} exerc√≠cios")